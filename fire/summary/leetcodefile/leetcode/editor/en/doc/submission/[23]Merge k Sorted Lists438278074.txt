

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length==0) return null;
        if(lists.length == 1) return lists[0];
        return merger(lists,0,lists.length-1);
    }

    public static ListNode merger(ListNode[] list, int from, int to){
        if(from == to) return list[from];
        int mid = from+ (to-from)/2;
        ListNode l1 = merger(list,from,mid);
        ListNode l2 = merger(list,mid+1,to);
        return mergeTwoList(l1,l2);
    }

    public static ListNode mergeTwoList(ListNode l1, ListNode l2){
        if(l1 == null) return l2;
        if(l2 == null) return l1;
        if(l1.val < l2.val){
            l1.next = mergeTwoList(l1.next,l2);
            return l1;
        }else{
            l2.next = mergeTwoList(l1,l2.next);
            return l2;
        }
    }
}

//runtime:2 ms
//memory:41.5 MB
