class Solution {

    public static List<Integer> findSubstring(String s, String[] words) {
        List<Integer> result = new ArrayList<>();
        if(words == null || words.length == 0) return result;

        // loop the words
        HashMap<String,Integer> wordsTimes = new HashMap<>();
        for (String word : words) {
            wordsTimes.put(word, wordsTimes.getOrDefault(word,0)+1);
        }

        int wordsNum = words.length;
        int wordLen = words[0].length();

        for (int i = 0; i < s.length() - wordLen*wordsNum +1 ; i++) {

            int itmp = i;
            HashMap<String,Integer> tmpJuge = new HashMap<>();
            while (itmp < i+ wordLen*wordsNum){
                String tmp = s.substring(itmp,itmp+wordLen);
                if(wordsTimes.containsKey(tmp)){
                    tmpJuge.put(tmp,tmpJuge.getOrDefault(tmp,0)+1);
                    int value = tmpJuge.getOrDefault(tmp,0);
                    if(value > wordsTimes.getOrDefault(tmp,0)){
                        break;
                    }
                }else {
                    break;
                }
                itmp = itmp+ wordLen;
            }
            if(itmp == i+ wordLen*wordsNum){
                result.add(i);
            }
        }
        return result;
    }

}

//runtime:161 ms
//memory:39.7 MB
